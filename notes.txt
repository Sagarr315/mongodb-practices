1. What is MongoDB?
MongoDB is a NoSQL database ‚Äî unlike traditional databases (like MySQL or SQL Server) that use tables,
MongoDB stores data in a flexible, JSON-like format called documents.
It‚Äôs perfect for applications where data structure can change often (like modern web apps).


‚ú® Main Features (Short & Sweet):
1.Document-Oriented: Data is stored in documents (like JSON objects).
2.Schema-less: You don‚Äôt need to define the structure of data (no fixed columns).
3.High Performance: Super fast for read/write operations.
4.Scalable: Handles big data easily with horizontal scaling (adding more machines).
5.Flexible: You can store arrays, nested objects, etc.



üìÑ Core Concepts
1. Database
Like a folder. Contains collections.

2. Collection
Like a table in SQL, but without fixed schema. Contains documents.

Example:
users collection, products collection

3. Document
Like a row in SQL, but in JSON format.

Example:{
  "name": "John",
  "age": 25,
  "email": "john@example.com"
}

Each document can have different fields. One document can have "age", another might not.



4. _id
Every document automatically gets a unique _id field (like a primary key).

Differences Between SQL VS MongoDB Terminology:

SQL	          MongoDB

Table	         Collection
Row	         Document
Column	         Field
Primary Key	 _id
JOIN	         Embedding/Nesting (or $lookup for joins)



CRUD Operations

           READ USING:  1.find()  and  findOne()

üîç find() vs findOne()

       Command                              Description
	
	find()	        Returns all matching documents as a cursor (like a pointer).
	findOne()	Returns only the first matching document (just one object).

*Cursor (from find())

	1.Acts like a pointer to the result set.
	2.You can loop through it or use .toArray() or .pretty() to display data.



*What is a Cursor in MongoDB?

	A cursor is like a pointer or iterator that MongoDB returns when you run find().

	It doesn't give you all the data at once ‚Äî instead, it gives you a stream of documents, so you can:
	Scroll through large results efficiently
	Use .forEach(), .toArray(), or .pretty() to handle the data

*Think of it like:
        A remote control that points to your data ‚Äî you press "next" to fetch more as needed!


*CREATE OPERATIONS with insert 
üì• insertOne()
Inserts a single document into a collection.

üì• insertMany()
Inserts multiple documents at once (array of documents).


***UPDATE OPERATIONS

‚úèÔ∏è updateOne()
Updates only the first matching document.

‚úèÔ∏è updateMany()
Updates all matching documents.


***DElETE OPERATIONS
‚ùå deleteOne()
Deletes only the first matching document.

‚ùå deleteMany()
Deletes all matching documents