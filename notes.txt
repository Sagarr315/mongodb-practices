1. What is MongoDB?
MongoDB is a NoSQL database ‚Äî unlike traditional databases (like MySQL or SQL Server) that use tables,
MongoDB stores data in a flexible, JSON-like format called documents.
It‚Äôs perfect for applications where data structure can change often (like modern web apps).


‚ú® Main Features (Short & Sweet):
1.Document-Oriented: Data is stored in documents (like JSON objects).
2.Schema-less: You don‚Äôt need to define the structure of data (no fixed columns).
3.High Performance: Super fast for read/write operations.
4.Scalable: Handles big data easily with horizontal scaling (adding more machines).
5.Flexible: You can store arrays, nested objects, etc.



üìÑ Core Concepts
1. Database
Like a folder. Contains collections.

2. Collection
Like a table in SQL, but without fixed schema. Contains documents.

Example:
users collection, products collection

3. Document
Like a row in SQL, but in JSON format.

Example:{
  "name": "John",
  "age": 25,
  "email": "john@example.com"
}

Each document can have different fields. One document can have "age", another might not.



4. _id
Every document automatically gets a unique _id field (like a primary key).

Differences Between SQL VS MongoDB Terminology:

SQL	          MongoDB

Table	         Collection
Row	         Document
Column	         Field
Primary Key	 _id
JOIN	         Embedding/Nesting (or $lookup for joins)



CRUD Operations

           READ USING:  1.find()  and  findOne()

üîç find() vs findOne()

       Command                              Description
	
	find()	        Returns all matching documents as a cursor (like a pointer).
	findOne()	Returns only the first matching document (just one object).

*Cursor (from find())

	1.Acts like a pointer to the result set.
	2.You can loop through it or use .toArray() or .pretty() to display data.



*What is a Cursor in MongoDB?

	A cursor is like a pointer or iterator that MongoDB returns when you run find().

	It doesn't give you all the data at once ‚Äî instead, it gives you a stream of documents, so you can:
	Scroll through large results efficiently
	Use .forEach(), .toArray(), or .pretty() to handle the data

*Think of it like:
        A remote control that points to your data ‚Äî you press "next" to fetch more as needed!                

*CREATE OPERATIONS with insert 
üì• insertOne()
Inserts a single document into a collection.

üì• insertMany()
Inserts multiple documents at once (array of documents).


***UPDATE OPERATIONS

‚úèÔ∏è updateOne()
Updates only the first matching document.

‚úèÔ∏è updateMany()
Updates all matching documents.


***DElETE OPERATIONS
‚ùå deleteOne()
Deletes only the first matching document.

‚ùå deleteMany()
Deletes all matching documents





1Ô∏è‚É£Select one field (column) from documents
üîπ With condition:

db.collection.find({ age: 25 }, { name: 1, _id: 0 })    IT WILL ONLY NAME OF DOCUMENT WHERE AGE IS 25

üîπ Without condition:

db.collection.find({}, { name: 1, _id: 0 })         SHOWS ONLY NAME OF ALL DOCUMENTS 



2Ô∏è‚É£ Why MongoDB is Schemaless
MongoDB collections don‚Äôt require a fixed structure.
You can store documents with different fields and types.

EXAMPLE 
// Document 1
{ _id: 1, name: "Amit" }

// Document 2
{ _id: 2, name: "Rohit", city: "Mumbai" }

üí° This flexibility is what makes MongoDB schemaless.


3Ô∏è‚É£ Data Types in MongoDB

String ‚Üí "name": "Amit"

Number ‚Üí "age": 25

Boolean ‚Üí "isActive": true

Array ‚Üí "skills": ["JS", "Python"]

Object ‚Üí "address": { city: "Pune" }



4Ô∏è‚É£ Check Type of a Field in JS (Mongo Shell)

typeof "hello"       // string
typeof 25            // number
typeof true          // boolean
typeof [1,2]         // object (array is a type of object)
typeof {a:1}         // object


5Ô∏è‚É£ Drop/Delete Collection

db.collection.drop()        // Deletes the whole collection.


6Ô∏è‚É£ Drop/Delete Database

db.dropDatabase()        //Deletes the current database.



‚úÖ What is ordered in MongoDB?
When you use insertMany(), MongoDB by default uses:

EXAMPLE : { ordered: true }

That means:
1.It inserts documents one by one in order.
2.If one document fails, it stops and doesn‚Äôt insert the rest.



üìå Summary:OF ORDERED OPTION

ordered: true	Stops at first error ‚ùå
ordered: false	Continues even after errors ‚úÖ




üìå 1. What is writeConcern?
writeConcern is used to control how MongoDB confirms a write operation (insert, update, delete).

It decides:
1).How safe you want your write
2).How fast it should be

üîß 2. Full example :
   {w:<value> j: <bollean> wtimeout:number}

üîß 3. Full example :
db.collection.insertOne(
  { name: "ram", age: 20 },
  {
    writeConcern: {
      w: 1,
      j: true,
      wtimeout: 5000
    }
  }
)

